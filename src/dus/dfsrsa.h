#ifndef DFSTOOLS_DFSRSA_H_INCLUDED
#define DFSTOOLS_DFSRSA_H_INCLUDED

/* Definitions of functions for long arithmetic and RSA cryptography, T8.505-T11.316; $DVS:time$ */
#include <stdint.h>

typedef uint32_t	dfsrsa_t;
typedef uint64_t	dfsrsa_long_t;
typedef int64_t		dfsrsa_slong_t;

#ifdef __cplusplus
extern "C" {
#endif
    
    // generates public and private keys of the lengh `keylen` of numbers dfsrsa_t
    // `keylen` should be a multiple of 4
    // the pubkey array should be prefilled with random numbers
    // the algorithm does not use any other random information
    // returns -1 in case of error
    extern int dfsrsa_keygen(dfsrsa_t *privkey, dfsrsa_t *pubkey, int keylen);

    // encodes/decodes the message using corresponding public/private key
    // `datalen` and `keylen` are measured in dfsrsa_t numbers
    // key `key` should be generated by function `dfsrsa_keygen`
    // `datalen` should be a multiple of half of the `keylen`
    // the highest bit should be 0 in each part of message (length `keylen`/2 of dfsrsa_t)
    // the result message is placed in the same array as the original
    // returns -1 in case of error
    extern int dfsrsa_crypt(dfsrsa_t *data, int datalen, dfsrsa_t *key, int keylen);

    // compares two long numbers and return -1, 0, 1
    extern int dfsrsa_cmp(dfsrsa_t *left, dfsrsa_t *right, int len);

    // adds two long numbers, carry is returned (0 or 1)
    extern int dfsrsa_add(dfsrsa_t *sum, dfsrsa_t *add1, dfsrsa_t *add2, int len);

    extern int dfsrsa_divmod(dfsrsa_t *mod, int mlen, dfsrsa_t *div, int len, dfsrsa_t *quotient);

#ifdef __cplusplus
}
#endif

#endif
